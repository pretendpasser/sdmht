// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package conn_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnClient is the client API for Conn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnClient interface {
	DispatchEventToClient(ctx context.Context, in *ClientEventReq, opts ...grpc.CallOption) (*DispatchEventToClientReply, error)
	KickClient(ctx context.Context, in *KickClientReq, opts ...grpc.CallOption) (*CommonReply, error)
}

type connClient struct {
	cc grpc.ClientConnInterface
}

func NewConnClient(cc grpc.ClientConnInterface) ConnClient {
	return &connClient{cc}
}

func (c *connClient) DispatchEventToClient(ctx context.Context, in *ClientEventReq, opts ...grpc.CallOption) (*DispatchEventToClientReply, error) {
	out := new(DispatchEventToClientReply)
	err := c.cc.Invoke(ctx, "/conn_pb.Conn/DispatchEventToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connClient) KickClient(ctx context.Context, in *KickClientReq, opts ...grpc.CallOption) (*CommonReply, error) {
	out := new(CommonReply)
	err := c.cc.Invoke(ctx, "/conn_pb.Conn/KickClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnServer is the server API for Conn service.
// All implementations must embed UnimplementedConnServer
// for forward compatibility
type ConnServer interface {
	DispatchEventToClient(context.Context, *ClientEventReq) (*DispatchEventToClientReply, error)
	KickClient(context.Context, *KickClientReq) (*CommonReply, error)
	mustEmbedUnimplementedConnServer()
}

// UnimplementedConnServer must be embedded to have forward compatible implementations.
type UnimplementedConnServer struct {
}

func (UnimplementedConnServer) DispatchEventToClient(context.Context, *ClientEventReq) (*DispatchEventToClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchEventToClient not implemented")
}
func (UnimplementedConnServer) KickClient(context.Context, *KickClientReq) (*CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickClient not implemented")
}
func (UnimplementedConnServer) mustEmbedUnimplementedConnServer() {}

// UnsafeConnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnServer will
// result in compilation errors.
type UnsafeConnServer interface {
	mustEmbedUnimplementedConnServer()
}

func RegisterConnServer(s grpc.ServiceRegistrar, srv ConnServer) {
	s.RegisterService(&Conn_ServiceDesc, srv)
}

func _Conn_DispatchEventToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).DispatchEventToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn_pb.Conn/DispatchEventToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).DispatchEventToClient(ctx, req.(*ClientEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conn_KickClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServer).KickClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conn_pb.Conn/KickClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServer).KickClient(ctx, req.(*KickClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Conn_ServiceDesc is the grpc.ServiceDesc for Conn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conn_pb.Conn",
	HandlerType: (*ConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchEventToClient",
			Handler:    _Conn_DispatchEventToClient_Handler,
		},
		{
			MethodName: "KickClient",
			Handler:    _Conn_KickClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conn.proto",
}
